STACK MEMORY
+ the stack grows and shrinks as functions push and pop local variables
+ there is no need to manage the memory yourself, variables are allocated and freed automatically
+ the stack has size limits
+ stack variables only exist while the function that created them, is running

HEAP MEMORY
+ variables can be accessed globally
+ no limit on memory size
+ (relatively) slower access
+ no guaranteed efficient use of space, memory may become fragmented over time as blocks of memory are allocated, then freed
+ you must manage memory (you're in charge of allocating and freeing variables)
+ variables can be resized using realloc()

